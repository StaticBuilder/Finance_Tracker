import React from 'react';
import {
  PieChart, Pie, LineChart, Line, BarChart, Bar,
  XAxis, YAxis, Tooltip, ResponsiveContainer, Cell, Legend
} from 'recharts';

// Shared color pairs for different metrics
const COLOR_PAIRS = {
  'Income-Spend': ['#10B981', '#EF4444'],
  'Expected-Actual': ['#3B82F6', '#F59E0B'],
  'Income-Budget': ['#10B981', '#6366F1'],
  'default': ['#10B981', '#EF4444']
};

// Shared formatting for currency values
const formatCurrency = (value) => `Ksh.${value.toLocaleString()}`;

// Generic data transformer for all chart types
const transformData = (value1, value2, labels) => {
  return [
    { name: labels[0], value: value1 },
    { name: labels[1], value: value2 }
  ];
};

// Reusable Custom Tooltip
const CustomTooltip = ({ active, payload, labels, title }) => {
  if (active && payload && payload.length) {
    const data = payload[0].payload;
    return (
      <div className="custom-tooltip p-2 bg-white border rounded shadow-lg">
        <p className="text-sm text-gray-700"><strong>{title}</strong></p>
        {Object.entries(data).map(([key, value], index) => {
          if (key !== 'name') {
            return (
              <p key={index} className={`text-sm ${index === 0 ? 'text-blue-500' : 'text-red-500'}`}>
                {labels[index]}: {formatCurrency(value)}
              </p>
            );
          }
          return null;
        })}
      </div>
    );
  }
  return null;
};

// Universal Chart Component
export const UniversalChart = ({
  type,
  value1,
  value2,
  labels = ['Value 1', 'Value 2'],
  title = 'Chart',
  chartType = 'bar' // 'bar', 'line', or 'pie'
}) => {
  // Determine color scheme based on label pair
  const colorKey = `${labels[0]}-${labels[1]}`;
  const colors = COLOR_PAIRS[colorKey] || COLOR_PAIRS.default;

  // Transform data for the charts
  const data = transformData(value1, value2, labels);
  const lineData = [{ name: 'Comparison', [labels[0]]: value1, [labels[1]]: value2 }];

  const renderChart = () => {
    switch (chartType) {
      case 'pie':
        return (
          <PieChart>
            <Pie
              data={data}
              dataKey="value"
              cx="50%"
              cy="50%"
              outerRadius={120}
              innerRadius={50}
              label={({ name, value }) => `${name}: ${formatCurrency(value)}`}
            >
              {data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={colors[index]} />
              ))}
            </Pie>
            <Tooltip  />
            <Legend />
          </PieChart>
        );
        // content={
        //   (props) => <CustomTooltip {...props} labels={labels} title={title} />
        // }

      case 'line':
        return (
          <LineChart data={lineData}>
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip/>
            <Legend />
            <Line
              type="monotone"
              dataKey={labels[0]}
              stroke={colors[0]}
              strokeWidth={2}
            />
            <Line
              type="monotone"
              dataKey={labels[1]}
              stroke={colors[1]}
              strokeWidth={2}
            />
          </LineChart>
        );

      default: // bar
        return (
          <BarChart data={lineData}>
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip  />
            <Legend />
            <Bar dataKey={labels[0]} fill={colors[0]} />
            <Bar dataKey={labels[1]} fill={colors[1]} />
          </BarChart>
        );
    }
  };

  return (
    <div className="border rounded-2xl p-5">
      <h2 className="font-bold text-lg">{title}</h2>
      <ResponsiveContainer width="100%" height={400}>
        {renderChart()}
      </ResponsiveContainer>
    </div>
  );
};

// Usage examples for different chart types with various metrics
export const ChartContainer = ({ 
  totalIncome,
  totalSpend,
  expectedSavings,
  actualSavings,
  totalBudget
}) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <UniversalChart
        value1={expectedSavings}
        value2={actualSavings}
        labels={['Expected Savings', 'Actual Savings']}
        title="Expected vs Actual Savings"
        chartType="bar"
      />
      
      <UniversalChart
        value1={totalIncome}
        value2={actualSavings}
        labels={['Income', 'Savings']}
        title="Income vs Actual Savings"
        chartType="pie"
      />
      
      <UniversalChart
        value1={totalIncome}
        value2={totalBudget}
        labels={['Income', 'Budget']}
        title="Income vs Total Budget"
        chartType="line"
      />
      
      <UniversalChart
        value1={totalIncome}
        value2={totalSpend}
        labels={['Income', 'Spend']}
        title="Income vs Spend"
        chartType="bar"
      />
    </div>
  );
};

export default ChartContainer;