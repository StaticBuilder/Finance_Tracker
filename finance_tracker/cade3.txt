i changed the them of my project ro dark as seen in the files below but now thw expenselist table details are not viscible to the user help me adjust the look of the table accordingly

//global.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 0%;
    --foreground: 0 0% 96%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  *:focus-visible {
    @apply outline-none ring-2 ring-primary ring-offset-2 ring-offset-background;
  }
}

@layer utilities {
  .bg-gradient-dark {
    background: linear-gradient(to bottom, hsl(0 0% 2%), hsl(0 0% 0%));
  }
}

//tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      animation: {
        wiggle: 'wiggle 1s ease-in-out infinite',
      },
      keyframes: {
        wiggle: {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        },
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        financeGreen: '#4CAF50',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: '#4CAF50',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      }
    }
  },
  plugins: [require("tailwindcss-animate")],
};

and this below is the expenselisttable file 
import { db } from "../../../../../../utils/dbConfig";
import { Expenses } from "../../../../../../utils/schema";
import { eq } from "drizzle-orm";
import { Trash, FileDown } from "lucide-react";
import React, { useMemo } from "react";
import { toast } from "sonner";
import jsPDF from "jspdf";
import 'jspdf-autotable';

function ExpenseListTable({ budget, expensesList, refreshData }) {
  const budgetName = budget?.name || "Combined";

  // Sort expenses by date (latest to earliest)
  const sortedExpenses = useMemo(() => {
    return [...expensesList].sort((a, b) => {
      // Parse dates (assuming DD/MM/YYYY format)
      const [dayA, monthA, yearA] = a.createdAt.split('/');
      const [dayB, monthB, yearB] = b.createdAt.split('/');
      
      // Create Date objects for comparison
      const dateA = new Date(yearA, monthA - 1, dayA);
      const dateB = new Date(yearB, monthB - 1, dayB);
      
      // Sort from latest to earliest (reversed the comparison)
      return dateB - dateA;
    });
  }, [expensesList]);

  const deleteExpense = async (expense) => {
    try {
      const result = await db
        .delete(Expenses)
        .where(eq(Expenses.id, expense.id))
        .returning();

      if (result) {
        toast.success("Expense Deleted!");
        await refreshData();
      }
    } catch (error) {
      console.error("Error deleting expense:", error);
      toast.error("Failed to delete expense");
    }
  };

  const exportToPDF = () => {
    if (!budget) {
      toast.error("Budget information not available");
      return;
    }

    try {
      const doc = new jsPDF();
      
      doc.setFontSize(20);
      doc.text(`${budgetName} Expense Report`, 14, 22);
      
      doc.setFontSize(11);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 30);
      
      // Use sorted expenses for PDF export
      const tableRows = sortedExpenses.map(expense => [
        expense.name,
        `Ksh.${expense.amount}`,
        expense.createdAt
      ]);
      
      doc.autoTable({
        startY: 40,
        head: [['Name', 'Amount', 'Date']],
        body: tableRows,
        theme: 'striped',
        headStyles: { 
          fillColor: [66, 66, 66],
          textColor: 255
        },
        styles: {
          overflow: 'linebreak',
          cellWidth: 'wrap'
        },
        columnStyles: {
          0: { cellWidth: 80 },
          1: { cellWidth: 50 },
          2: { cellWidth: 50 }
        }
      });
      
      const total = sortedExpenses.reduce((sum, expense) => sum + Number(expense.amount), 0);
      const finalY = doc.previousAutoTable.finalY || 40;
      doc.setFontSize(12);
      doc.text(`Total Expenses: Ksh.${total.toFixed(2)}`, 14, finalY + 10);
      
      doc.save(`${budgetName} Expenses.pdf`);
      toast.success("PDF exported successfully!");
    } catch (error) {
      console.error("Error exporting PDF:", error);
      toast.error("Failed to export PDF");
    }
  };

  const totalSpent = sortedExpenses.reduce(
    (sum, expense) => sum + Number(expense.amount),
    0
  );

  return (
    <div className="mt-3">
      <div className="flex justify-between items-center">
        <h2 className="font-bold text-lg md:text-lg text-sm">{budgetName} Expenses</h2>
        <button
          onClick={exportToPDF}
          className="flex items-center gap-2 bg-red-500 hover:bg-red-600 active:bg-blue-500 text-white px-4 py-2 rounded-lg transition-colors duration-200 md:text-base text-sm"
        > 
          <FileDown className="w-4 h-4" />
          Export PDF
        </button>
      </div>
      <div className="grid grid-cols-4 rounded-tl-xl rounded-tr-xl bg-red-200 p-2 mt-3">
        <h2 className="font-bold md:text-base text-xs">Name</h2>
        <h2 className="font-bold md:text-base text-xs">Amount</h2>
        <h2 className="font-bold md:text-base text-xs text-center">Date</h2>
        <h2 className="font-bold md:text-base text-xs text-center">Action</h2>
      </div>
      {sortedExpenses.map((expenses) => (
        <div key={expenses.id} className="grid grid-cols-4 bg-slate-50 rounded-bl-xl rounded-br-xl p-2">
          <h2 className="md:text-base text-xs">{expenses.name}</h2>
          <h2 className="md:text-base text-xs">Ksh.{expenses.amount}</h2>
          <h2 className="md:text-base text-xs flex justify-center">{expenses.createdAt}</h2>
          <h2
            onClick={() => deleteExpense(expenses)}
            className="text-red-500 cursor-pointer flex items-center gap-2 justify-center"
          >
            <Trash className="md:w-4 md:h-4 w-6 h-6" />
            <span className="md:inline hidden">Delete</span>
          </h2>
        </div>
      ))}
  
      <div className="mt-3 text-right">
        <h2 className="font-bold text-red-600 md:text-base text-sm">
          Total Spent: Ksh.{totalSpent.toFixed(2)}
        </h2>
      </div>
    </div>
  );
}

export default ExpenseListTable;